// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
)

const getNextTask = `-- name: GetNextTask :one
SELECT osm_id,
       alkis_oi,
       st_asgeojson(st_forcepolygonccw(st_transform(osm_geom, 'EPSG:3857')))::text   as osm_geom,
       st_asgeojson(st_forcepolygonccw(st_transform(alkis_geom, 'EPSG:3857')))::text as alkis_geom
FROM "public"."combinations"
WHERE "status" = 1
LIMIT 1
`

type GetNextTaskRow struct {
	OsmID     string
	AlkisOi   string
	OsmGeom   string
	AlkisGeom string
}

func (q *Queries) GetNextTask(ctx context.Context) (GetNextTaskRow, error) {
	row := q.db.QueryRow(ctx, getNextTask)
	var i GetNextTaskRow
	err := row.Scan(
		&i.OsmID,
		&i.AlkisOi,
		&i.OsmGeom,
		&i.AlkisGeom,
	)
	return i, err
}

const setTaskStatus = `-- name: SetTaskStatus :exec
UPDATE "public"."combinations"
SET "status" = $3
WHERE "osm_id" = $1
  AND "alkis_oi" = $2
`

type SetTaskStatusParams struct {
	OsmID   string
	AlkisOi string
	Status  int32
}

func (q *Queries) SetTaskStatus(ctx context.Context, arg SetTaskStatusParams) error {
	_, err := q.db.Exec(ctx, setTaskStatus, arg.OsmID, arg.AlkisOi, arg.Status)
	return err
}
